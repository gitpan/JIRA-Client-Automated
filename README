NAME
    JIRA::Client::Automated - A JIRA REST Client for automated scripts

VERSION
    version 1.00

SYNOPSIS
        use JIRA::Client::Automated;

        my $jira = JIRA::Client::Automated->new($url, $user, $password);
        my $issue = $jira->create_issue($project, $type, $summary, $description);
        my $search_results = $jira->search_issues($jql, 1, 100); # query should be a single string of JQL
        my @issues = $jira->all_search_results($jql, 1000); # query should be a single string of JQL
        my $issue = $jira->get_issue($key);
        $jira->update_issue($key, $update_hash); # update_hash is { field => value, ... }
        $jira->create_comment($key, $text);
        $jira->attach_file_to_issue($key, $filename);
        $jira->transition_issue($key, $transition, $transition_hash); # transition_hash is { field => value, ... }
        $jira->close_issue($key, $resolve, $message); # resolve is the resolution value
        $jira->delete_issue($key);

DESCRIPTION
    JIRA::Client::Automated is an adapter between any automated system and
    JIRA's REST API. This module is explicitly designed to easily create and
    close issues within a JIRA instance via automated scripts.

    For example, if you run nightly batch jobs, you can use
    JIRA::Client::Automated to have those jobs automatically create issues
    in JIRA for you when the script runs into errors. You can attach error
    log files to the issues and then they'll be waiting in someone's open
    issues list when they arrive at work the next day.

    If you want to avoid creating the same issue more than once you can
    search JIRA for it first, only creating it if it doesn't exist. If it
    does already exist you can add a comment or a new error log to that
    issue.

WORKING WITH JIRA
    Atlassian has made a very complete REST API for recent (> 5.0) versions
    of JIRA. By virtue of being complete it is also somewhat large and a
    little complex for the beginner. Reading their tutorials is *highly*
    recommended before you start making hashes to update or transition
    issues.

    <https://developer.atlassian.com/display/JIRADEV/JIRA+REST+APIs>

    This module is designed for the JIRA 5.2.11 REST API, as of March 2013,
    but it seems to work fine with JIRA 6.0 as well. Your mileage may vary
    with future versions.

JIRA ISSUE HASH FORMAT
    When you work with an issue in JIRA's REST API, it gives you a JSON file
    that follows this spec:

    <https://developer.atlassian.com/display/JIRADEV/The+Shape+of+an+Issue+i
    n+JIRA+REST+APIs>

    JIRA::Client::Automated tries to be nice to you and not make you deal
    directly with JSON. When you create a new issue, you can pass in just
    the pieces you want and "create_issue" will transform them to JSON for
    you. The same for closing and deleting issues. However there's not much
    I can do about updating or transitioning issues. Each JIRA installation
    will have different fields available for each issue type and transition
    screen and only you will know what they are. So in those cases you'll
    need to pass in an "update_hash" which will be transformed to the proper
    JSON by the method.

    An update_hash looks like this:

        { field => value, field2 => value2, ...}

    For example:

        {
            host_id => "example.com", 
            { resolution => { name => "Resolved" } } 
        }

    If you do not read JIRA's documentation about their JSON format you will
    hurt yourself banging your head against your desk in frustration the
    first few times you try to use "update_issue". Please RTFM.

    Note that even though JIRA requires JSON, JIRA::Client::Automated will
    helpfully translate it to and from regular hashes for you. You only pass
    hashes to JIRA::Client::Automated, not direct JSON.

    But, since you aren't going to read the documentation, I recommend
    connecting to your JIRA server and calling "get_issue" with a key you
    know exists and then dump the result. That'll get you started.

METHODS
  new
        my $jira = JIRA::Client::Automated->new($url, $user, $password);

    Create a new JIRA::Client::Automated object by passing in the following:

    1. URL for the JIRA server, such as "http://example.atlassian.net/"

    2. Username to use to login to the JIRA server

    3. Password for that user

    All three parameters are required. JIRA::Client::Automated must connect
    to the JIRA instance using *some* username and password. I recommend
    setting up a special "auto" or "batch" username to use just for use by
    scripts.

    If you are using Google Account integration, the username and password
    to use are the ones you set up at the very beginning of the registration
    process and then never used again because Google logged you in.

  create_issue
        my $issue = $jira->create_issue($project, $type, $summary, $description);

    Creating a new issue requires the project key, type ("Bug", "Task",
    etc.), and a summary and description. Other fields that are on the new
    issue form could be supported by a subclass, but it's probably easier to
    use "update_issue" with JIRA's syntax for now.

    Returns a hash containing the information about the new issue or dies if
    there is an error. See "JIRA ISSUE HASH FORMAT" for details of the hash.

  update_issue
        $jira->update_issue($key, $update_hash);

    Updating an issue is one place where JIRA's REST API shows through. You
    pass in the issue key and update_hash with only the field changes you
    want in it. See "JIRA ISSUE HASH FORMAT", above, for details about the
    format of the update_hash.

  get_issue
        my $issue = $jira->get_issue($key);

    You can get the details for any issue, given its key. This call returns
    a hash containing the information for the issue in JIRA's format. See
    "JIRA ISSUE HASH FORMAT" for details.

  transition_issue
        $jira->transition_issue($key, $transition, $update_hash);

    Transitioning an issue is what happens when you click the button that
    says "Resolve Issue" or "Start Progress" on it. Doing this from code is
    harder, but JIRA::Client::Automated makes it as easy as possible. You
    pass this method the issue key, the name of the transition (spacing and
    capitalization matter), and an optional update_hash containing any
    fields on the transition screen that you want to update.

    If you have required fields on the transition screen (such as
    "Resolution" for the "Resolve Issue" screen), you must pass those fields
    in as part of the update_hash or you will get an error from the server.
    See "JIRA ISSUE HASH FORMAT" for the format of the update_hash.

  close_issue
        $jira->close_issue($key, $resolve, $message);

    Pass in the resolution reason and an optional comment to close an issue.
    Using this method requires that the issue is is a status where it can
    use the "Close Issue" transition. If not, you will get an error from the
    server.

    Resolution ("Fixed", "Won't Fix", etc.) is only required if the issue
    hasn't already been resolved in an earlier transition. If you try to
    resolve an issue twice, you will get an error.

    If you do not supply a comment, the default value is "Issue closed by
    script".

    If your JIRA installation has extra required fields on the "Close Issue"
    screen then you'll want to use the more generic "transition_issue" call
    instead.

  delete_issue
        $jira->delete_issue($key);

    Deleting issues is for testing your JIRA code. In real situations you
    almost always want to close unwanted issues with an "Oops!" resolution
    instead.

  create_comment
        $jira->create_comment($key, $text);

    You may use any valid JIRA markup in comment text. (This is handy for
    tables of values explaining why something in the database is wrong.)
    Note that comments are all created by the user you used to create your
    JIRA::Client::Automated object, so you'll see that name often.

  search_issues
        my @search_results = $jira->search_issues($jql, 1, 100);

    You've used JQL before, when you did an "Advanced Search" in the JIRA
    web interface. That's the only way to search via the REST API.

    This is a paged method. Pass in the starting result number and number of
    results per page and it will return issues a page at a time. If you know
    you want all of the results, you can use "all_search_results" instead.

    This method returns a hashref containing up to five values:

    1. total => total number of results

    2. start => result number for the first result

    3. max => maximum number of results per page

    4. issues => an arrayref containing the actual found issues

    5. errors => an arrayref containing error messages

    For example, to page through all results $max at a time:

        my (@all_results, $issues);
        do {
            $results = $self->search_issues($jql, $start, $max);
            if ($results->{errors}) {
                die join "\n", @{$results->{errors}};
            }
            @issues = @{$results->{issues}};
            push @all_results, @issues;
            $start += $max;
        } until (scalar(@$issues) < $max);

    (Or just use "all_search_results" instead.)

  all_search_results
        my @issues = $jira->all_search_results($jql, 1000);

    Like "search_issues", but returns all the results as an array of issues.
    You can specify the maximum number to return, but no matter what, it
    can't return more than the value of jira.search.views.default.max for
    your JIRA installation.

  attach_file_to_issue
        $jira->attach_file_to_issue($key, $filename);

    This method does not let you attach a comment to the issue at the same
    time. You'll need to call "create_comment" for that.

    Watch out for file permissions! If the user running the script does not
    have permission to read the file it is trying to upload, you'll get
    weird errors.

  make_browse_url
        my $url = $jira->make_browse_url($key);

    A helper method to make emails containing lists of bugs easier to use.
    This just appends the key to the URL for the JIRA server so that you can
    click on it and go directly to that issue.

FAQ
  Why is there no object for a JIRA issue?
    Because it seemed silly. You *could* write such an object and give it
    methods to transition itself, close itself, etc., but when you are
    working with JIRA from batch scripts, you're never really working with
    just one issue at a time. And when you have a hundred of them, it's
    easier to not objectify them and just use JIRA::Client::Automated as a
    mediator. That said, if this is important to you, I wouldn't say no to a
    patch offering this option.

BUGS
    Please report bugs or feature requests to the author.

AUTHOR
    Michael Friedman <frimicc@cpan.org>

COPYRIGHT AND LICENSE
    This software is copyright (c) 2013 by Polyvore, Inc.

    This is free software; you can redistribute it and/or modify it under
    the same terms as the Perl 5 programming language system itself.

